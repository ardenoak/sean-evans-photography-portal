'use client';
import { useRouter, usePathname } from 'next/navigation';
import { useState } from 'react';
import Logo from '@/components/Logo';

interface NavItem {
  name: string;
  href: string;
  icon: string;
  current?: boolean;
}

const navigation: NavItem[] = [
  { name: 'Dashboard', href: '/tally/dashboard', icon: '📊' },
  { name: 'Lead Management', href: '/tally/leads', icon: '👥' },
  { name: 'Experience & Pricing', href: '/tally/packages', icon: '📦' },
  { name: 'Session Management', href: '/tally/sessions', icon: '📸' },
  { name: 'Client Relations', href: '/tally/clients', icon: '🤝' },
];

export default function AdminLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const router = useRouter();
  const pathname = usePathname();
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [sidebarExpanded, setSidebarExpanded] = useState(true);

  const isCurrentPath = (href: string) => {
    if (href === '/tally/dashboard') {
      return pathname === '/tally/dashboard' || pathname === '/admin';
    }
    return pathname.startsWith(href);
  };

  return (
    <div className="min-h-screen bg-ivory flex">
      {/* Expandable Sidebar */}
      <div className={`bg-charcoal transition-all duration-300 ease-in-out ${
        sidebarExpanded ? 'w-64' : 'w-16'
      } lg:relative fixed inset-y-0 left-0 z-50 ${
        sidebarOpen ? 'translate-x-0' : '-translate-x-full lg:translate-x-0'
      }`}>
        <div className="flex flex-col h-full">
          {/* Sidebar Header */}
          <div className="flex items-center justify-between h-16 px-4 border-b border-white/10">
            {sidebarExpanded && (
              <Logo width={120} height={40} variant="dark" className="opacity-95" />
            )}
            <button
              onClick={() => setSidebarExpanded(!sidebarExpanded)}
              className="p-2 rounded-lg text-white/70 hover:text-white hover:bg-white/10 transition-colors hidden lg:flex"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                {sidebarExpanded ? (
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 19l-7-7 7-7m8 14l-7-7 7-7" />
                ) : (
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 5l7 7-7 7M5 5l7 7-7 7" />
                )}
              </svg>
            </button>
          </div>

          {/* Navigation */}
          <nav className="flex-1 p-2 space-y-1">
            {navigation.map((item) => (
              <button
                key={item.name}
                onClick={() => {
                  router.push(item.href);
                  setSidebarOpen(false);
                }}
                className={`group flex items-center w-full p-3 text-sm transition-all duration-200 rounded-lg ${
                  isCurrentPath(item.href)
                    ? 'bg-white/15 text-white border-l-4 border-yellow-500'
                    : 'text-white/70 hover:bg-white/8 hover:text-white'
                }`}
                title={!sidebarExpanded ? item.name : undefined}
              >
                <span className="text-lg flex-shrink-0 w-6 text-center">{item.icon}</span>
                {sidebarExpanded && (
                  <span className="ml-3 tracking-wide font-light">{item.name}</span>
                )}
              </button>
            ))}
          </nav>

          {/* Sidebar Footer */}
          {sidebarExpanded && (
            <div className="p-4 border-t border-white/10">
              <div className="text-white/60 text-xs font-light">
                <div className="mb-1">Administrator Portal</div>
                <div className="text-yellow-400/80 font-medium">Sean Evans Photography</div>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Mobile sidebar overlay */}
      {sidebarOpen && (
        <div className="fixed inset-0 z-40 bg-black bg-opacity-50 lg:hidden" onClick={() => setSidebarOpen(false)} />
      )}

      {/* Main Content Area */}
      <div className="flex-1 flex flex-col">
        {/* Top Navigation Bar */}
        <header className="bg-white border-b border-charcoal/10 h-16 flex items-center justify-between px-6 lg:px-8">
          <div className="flex items-center">
            {/* Mobile menu button */}
            <button
              onClick={() => setSidebarOpen(true)}
              className="lg:hidden -ml-2 mr-4 p-2 text-charcoal hover:bg-charcoal/5 rounded-lg"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
              </svg>
            </button>
            
            {/* Breadcrumbs */}
            <nav className="flex" aria-label="Breadcrumb">
              <ol className="flex items-center space-x-2">
                <li>
                  <button 
                    onClick={() => router.push('/tally/dashboard')}
                    className="text-charcoal/60 hover:text-charcoal text-sm font-light"
                  >
                    Admin Portal
                  </button>
                </li>
                {pathname !== '/tally/dashboard' && pathname !== '/admin' && (
                  <>
                    <li className="text-charcoal/40">/</li>
                    <li>
                      <span className="text-charcoal text-sm font-medium capitalize">
                        {pathname.split('/').pop()?.replace(/-/g, ' ')}
                      </span>
                    </li>
                  </>
                )}
              </ol>
            </nav>
          </div>

          <div className="flex items-center space-x-4">
            <div className="text-right">
              <div className="text-charcoal/60 text-xs font-light">Access Level</div>
              <div className="text-charcoal text-sm font-medium">Administrator</div>
            </div>
          </div>
        </header>

        {/* Page Content */}
        <main className="flex-1 bg-ivory">
          {children}
        </main>
      </div>
    </div>
  );
}